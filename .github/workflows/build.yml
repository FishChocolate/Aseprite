name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [RelWithDebInfo, Debug]
        enable_ui: [off]
        include:
          - os: ubuntu-latest
            build_type: Debug
            enable_ui: on
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.enable_ui }}
      - uses: seanmiddleditch/gha-setup-ninja@master
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Workaround for windows-2022 and cmake 3.25.0
        if: runner.os == 'Windows'
        shell: bash
        run: rm -rf C:/Strawberry/
      - name: Install Dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
      - name: Generating Makefiles
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] ; then
            export enable_ccache=off
          else
            export enable_ccache=on
          fi
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=ON \
            -DENABLE_UI=${{ matrix.enable_ui }} \
            -DENABLE_CCACHE=$enable_ccache
      - name: Compiling
        shell: bash
        run: |
          cd build && ninja
      - name: Running C++ Tests
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]] ; then
            export XVFB=xvfb-run
          fi
          cd build && $XVFB ctest --output-on-failure
      - name: Running CLI Tests
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]] ; then
            export XVFB=xvfb-run
          fi
          export ASEPRITE=$PWD/build/bin/aseprite
          cd tests
          $XVFB bash run-tests.sh
  windows-mingw:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug]
        enable_ui: [off]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}
    - uses: seanmiddleditch/gha-setup-ninja@master
    - name: Workaround for windows-2022
      run: echo "Workaround for windows-2022"
    - name: Generating Makefiles
      run: cmake -B D:/a/Eat-the-Mushroom/Eat-the-Mushroom/build -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -G Ninja
    - name: Compiling
      run: ninja aseprite